function init() {
    vp = document.createElement("div");
    document.body.appendChild(vp);

    cam = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1e4);
    s = new THREE.Scene;
    s.add(cam);
    var a = new THREE.AmbientLight(16777215, 1, 100);
    s.add(a);
    var b = new THREE.DirectionalLight(16777215, 1, 700);
    b.position.y = 400;
    s.add(b);
    cl = new THREE.SpotLight(16777215, 1, 700);
    s.add(cl);




    var c = "t_01/g_01/";
    var d = [c + "px.jpg", c + "nx.jpg", c + "py.jpg", c + "ny.jpg", c + "pz.jpg", c + "nz.jpg"];
    var e = THREE.ImageUtils.loadTextureCube(d);
    
    garage = new THREE.Object3D;
    var f = new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/g_01/g01.jpg")
    });
    // var g = new THREE.JSONLoader(true);
    // g.load(m_01_g_01_g01_js, function (a) {
    //     var b = new THREE.Mesh(a, f);
    //     b.scale.set(.9, .9, .9);
    //     b.position.y = -15;
    //     garage.add(b)
    // });
    var h = THREE.ImageUtils.loadTexture("t_01/g_01/f01.jpg");
    h.wrapS = h.wrapT = THREE.RepeatWrapping;
    h.repeat.set(10, 10);
    
    var i = new THREE.Mesh(new THREE.PlaneGeometry(1100, 1100, 1, 1), new THREE.MeshBasicMaterial({
        map: h
    }));
    i.position.y = -17;
    i.rotation.x = -Math.PI / 2;
    garage.add(i);
    var j = new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/g_01/fs01.png"),
        transparent: true
    });
    var k = new THREE.Mesh(new THREE.PlaneGeometry(1100, 1100, 1, 1), j);
    k.position.y = -16;
    k.rotation.x = -Math.PI / 2;
    garage.add(k);
    garage.rotation.y = Math.PI / 2;
    s.add(garage);
    rm = new THREE.MeshPhongMaterial({
        color: rc,
        reflectivity: .5,
        combine: THREE.MixOperation,
        envMap: e,
        specular: 7829367
    });
    var l = new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/ap_01/w01.png"),
        transparent: true
    });
    bm = new THREE.MeshPhongMaterial({
        color: bc,
        reflectivity: .5,
        combine: THREE.MixOperation,
        envMap: e,
        specular: 13421772
    });
    var m = new THREE.MeshPhongMaterial({
        color: 16777215,
        reflectivity: 1,
        combine: THREE.MixOperation,
        envMap: e,
        opacity: .4,
        transparent: true,
        specular: 13421772
    });
    var n = new THREE.MeshLambertMaterial({
        color: 3355443,
        reflectivity: .5,
        combine: THREE.MixOperation,
        envMap: e
    });
    c01 = new THREE.Object3D;
    
    cc(m_01_f_01_c_01_b01_js, m_01_f_01_c_01_g01_js, m_01_f_01_c_01_br01_js, m_01_f_01_c_01_r01_js, m_01_f_01_c_01_w01_js, m_01_f_01_c_01_i01_js, bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/f_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/f_01/c_01/s01.png"),
        transparent: true
    }), c01);
    c02 = new THREE.Object3D;
    cc(m_01_mi_01_c_01_b01_js, m_01_mi_01_c_01_g01_js, m_01_mi_01_c_01_br01_js, m_01_mi_01_c_01_r01_js, m_01_mi_01_c_01_w01_js, m_01_mi_01_c_01_i01_js, bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/mi_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/mi_01/c_01/s01.png"),
        transparent: true
    }), c02);
    c03 = new THREE.Object3D;
    cc(m_01_a_01_c_01_b01_js, m_01_a_01_c_01_g01_js, m_01_a_01_c_01_br01_js, m_01_a_01_c_01_r01_js, m_01_a_01_c_01_w01_js, m_01_a_01_c_01_i01_js, bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/a_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/a_01/c_01/s01.png"),
        transparent: true
    }), c03);
    c04 = new THREE.Object3D;
    cc("m_01/ma_01/c_01/b01.js", "m_01/ma_01/c_01/g01.js", "m_01/ma_01/c_01/br01.js", "m_01/ma_01/c_01/r01.js", "m_01/ma_01/c_01/w01.js", "m_01/ma_01/c_01/i01.js", bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/ma_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/ma_01/c_01/s01.png"),
        transparent: true
    }), c04);
    c05 = new THREE.Object3D;
    cc("m_01/ch_01/c_01/b01.js", "m_01/ch_01/c_01/g01.js", "m_01/ch_01/c_01/br01.js", "m_01/ch_01/c_01/r01.js", "m_01/ch_01/c_01/w01.js", "m_01/ch_01/c_01/i01.js", bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/ch_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/ch_01/c_01/s01.png"),
        transparent: true
    }), c05);
    c06 = new THREE.Object3D;
    cc("m_01/me_01/c_01/b01.js", "m_01/me_01/c_01/g01.js", "m_01/me_01/c_01/br01.js", "m_01/me_01/c_01/r01.js", "m_01/me_01/c_01/w01.js", "m_01/me_01/c_01/i01.js", bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/me_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/me_01/c_01/s01.png"),
        transparent: true
    }), c06);
    c07 = new THREE.Object3D;
    cc("m_01/n_01/c_01/b01.js", "m_01/n_01/c_01/g01.js", "m_01/n_01/c_01/br01.js", "m_01/n_01/c_01/r01.js", "m_01/n_01/c_01/w01.js", "m_01/n_01/c_01/i01.js", bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/n_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/n_01/c_01/s01.png"),
        transparent: true
    }), c07);
    c08 = new THREE.Object3D;
    cc("m_01/am_01/c_01/b01.js", "m_01/am_01/c_01/g01.js", "m_01/am_01/c_01/br01.js", "m_01/am_01/c_01/r01.js", "m_01/am_01/c_01/w01.js", "m_01/am_01/c_01/i01.js", bm, m, n, rm, l, new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/am_01/c_01/i01.jpg")
    }), new THREE.MeshBasicMaterial({
        map: THREE.ImageUtils.loadTexture(path + "t_01/am_01/c_01/s01.png"),
        transparent: true
    }), c08);

    var CanvasRenderer = 0;

    if(CanvasRenderer) {
        rr = new THREE.CanvasRenderer({
            alpha: false,
            antialias: true
        });
    } else {
         rr = new THREE.WebGLRenderer({
            alpha: true,
             antialias: true
         });
    }



    // rr = new THREE.CanvasRenderer({
    //     antialias: true, alpha:true,stencil:false,powerPreference:"high-performance"
    // });


    rr.setSize(window.innerWidth, window.innerHeight);
    //rr.setClearColorHex(0, 1);
    //rr.setClearColor(0x000000, 1.0);

    rr.clear();
    rr.autoClear = true;
    rr.sortObjects = false;
    //rr.autoClearColor = true;

    //rr.info.autoReset = 1;

    vp.appendChild(rr.domElement);
    vp.addEventListener("mousemove", mouseMove, false);
    vp.addEventListener("mousedown", mouseDown, false);
    vp.addEventListener("mouseup", mouseUp, false);
    vp.addEventListener("mousewheel", mouseWheel, false);
    vp.addEventListener("DOMMouseScroll", mouseWheelDOM, false);
    window.addEventListener("resize", resize, false);
    window.addEventListener("contextmenu", contextMenu, false);
    window.addEventListener("keyup", keyboard, false);
    render()

}

function lm(a, b, c) {
    var d = new THREE.Mesh(a, b);
    d.scale.set(.3, .3, .3);
    d.position.y = -15;
    c.add(d)
}

function cc(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var o = new THREE.JSONLoader(true);
    o.load(a, function (a) {
        lm(a, g, n)
    });
    o.load(b, function (a) {
        lm(a, h, n)
    });
    o.load(c, function (a) {
        lm(a, i, n)
    });
    o.load(d, function (a) {
        lm(a, j, n)
    });
    o.load(e, function (a) {
        lm(a, k, n)
    });
    o.load(f, function (a) {
        lm(a, l, n)
    });
    var p = new THREE.Mesh(new THREE.PlaneGeometry(350, 350, 1, 1), m);
    p.rotation.x = -Math.PI / 2;
    p.position.y = -15;
    n.add(p);
    n.rotation.y = Math.PI / 4 * 45;
    s.add(n)
}

function cv(a, b) {
    switch (b) {
        case true:
            THREE.SceneUtils.traverseHierarchy(a, function (a) {
                a.visible = true
            });
            break;
        case false:
            THREE.SceneUtils.traverseHierarchy(a, function (a) {
                a.visible = false
            });
            break
    }
}

function contextMenu(a) {
    a.preventDefault()
}

function keyboard(a) {
    switch (a.keyCode) {
        case 49:
            index = 0;
            break;
        case 50:
            index = 1;
            break;
        case 51:
            index = 2;
            break
    }
}
function mouseDown(a) {
    a.preventDefault();
    ism = true;
    mdx = a.clientX;
    mdy = a.clientY
}
function mouseMove(a) {
    a.preventDefault();
    cmx = a.clientX;
    cmy = a.clientY
}
function mouseUp(a) {
    a.preventDefault();
    ism = false
}
function mouseWheel(a) {
    a.preventDefault();
    cam_d -= a.wheelDeltaY * .005;
    if (cam_d < 200) {
        cam_d = 200
    }
    if (cam_d > 290) {
        cam_d = 290
    }
}
function mouseWheelDOM(a) {
    a.preventDefault();
    cam_d += a.detail * .4;
    if (cam_d < 200) {
        cam_d = 200
    }
    if (cam_d > 290) {
        cam_d = 290
    }
}

function resize(a) {
    a.preventDefault();
    cam.aspect = window.innerWidth / window.innerHeight;
    cam.updateProjectionMatrix();
    rr.setSize(window.innerWidth, window.innerHeight)
}
function replaceCarByIndex(a) {
    index = a
}
function toggleFullscreen() {
    this.webkitFullscreenSupport = "webkitCancelFullScreen" in document ? true : false;
    if (!fullscreen) {
        if (this.webkitFullscreenSupport) {
            fullscreen = true;
            document.body.webkitRequestFullScreen()
        } else {
            fullscreen = false;
            alert("To see it in fullscreen mode please use Chrome or Safari.\n\nThe browser in use has no stable fullscreen mode or doesn't support it yet.\n\nSorry for the inconvenience.")
        }
    } else {
        fullscreen = false;
        document.webkitCancelFullScreen()
    }
}
function orbitController(a) {
    switch (cam_t) {
        case "auto":
            if (ism) {
                if (Math.abs(mdx - cmx) >= 1) {
                    dy = (mdx - cmx) / 6
                }
                dp = (mdy - cmy) / 6
            } else {
                if (cam_p < 89 && dirY == "down") {
                    cam_p += .02
                } else if (cam_p > 88 && dirY == "down") {
                    dirY = "up"
                } else if (cam_p > 57 && dirY == "up") {
                    cam_p -= .02
                } else if (cam_p < 58 && dirY == "up") {
                    dirY = "down"
                }
                cam_y -= .1
            }
            cam_p += dp;
            cam_y -= dy;
            if (cam_p >= 90) {
                cam_p = 89.9
            } else if (cam_p <= 56) {
                cam_p = 56.1
            }
            dy *= .7;
            dp *= .7;
            break;
        case "free":
            if (ism) {
                if (Math.abs(mdx - cmx) >= 1) {
                    dy = (mdx - cmx) / 6
                }
                dp = (mdy - cmy) / 6
            }
            cam_p += dp;
            cam_y -= dy;
            if (cam_p >= 90) {
                cam_p = 89.9
            } else if (cam_p <= 56) {
                cam_p = 56.1
            }
            dy *= .7;
            dp *= .7;
            break
    }
    a.position.y = cam_d * Math.cos(cam_p * Math.PI / 180);
    a.position.x = cam_d * Math.sin(cam_p * Math.PI / 180) * Math.cos(cam_y * Math.PI / 180);
    a.position.z = cam_d * Math.sin(cam_p * Math.PI / 180) * Math.sin(cam_y * Math.PI / 180);
    a.lookAt({
        x: 0,
        y: 0,
        z: 0
    });
    mdx = cmx;
    mdy = cmy
}
function render() {
    requestAnimationFrame(render);
    orbitController(cam);
    bm.color.setHex(bc);
    rm.color.setHex(rc);
    cl.position.set(cam.position.x, cam.position.y, cam.position.z);
    
    switch (index) {
        case 0:
            cv(c01, true);
            cv(c02, false);
            cv(c03, false);
            cv(c04, false);
            cv(c05, false);
            cv(c06, false);
            cv(c07, false);
            cv(c08, false);
            break;
        case 1:
            cv(c01, false);
            cv(c02, true);
            cv(c03, false);
            cv(c04, false);
            cv(c05, false);
            cv(c06, false);
            cv(c07, false);
            cv(c08, false);
            break;
        case 2:
            cv(c01, false);
            cv(c02, false);
            cv(c03, true);
            cv(c04, false);
            cv(c05, false);
            cv(c06, false);
            cv(c07, false);
            cv(c08, false);
            break;
        case 3:
            cv(c01, false);
            cv(c02, false);
            cv(c03, false);
            cv(c04, true);
            cv(c05, false);
            cv(c06, false);
            cv(c07, false);
            cv(c08, false);
            break;
        case 4:
            cv(c01, false);
            cv(c02, false);
            cv(c03, false);
            cv(c04, false);
            cv(c05, true);
            cv(c06, false);
            cv(c07, false);
            cv(c08, false);
            break;
        case 5:
            cv(c01, false);
            cv(c02, false);
            cv(c03, false);
            cv(c04, false);
            cv(c05, false);
            cv(c06, true);
            cv(c07, false);
            cv(c08, false);
            break;
        case 6:
            cv(c01, false);
            cv(c02, false);
            cv(c03, false);
            cv(c04, false);
            cv(c05, false);
            cv(c06, false);
            cv(c07, true);
            cv(c08, false);
            break;
        case 7:
            cv(c01, false);
            cv(c02, false);
            cv(c03, false);
            cv(c04, false);
            cv(c05, false);
            cv(c06, false);
            cv(c07, false);
            cv(c08, true);
            break
    }
    rr.render(s, cam)
}
function selectCamera(a) {
    cam_t = a
}
function gcp(a) {
    var b = 0,
        c = 0;
    if (a.offsetParent) {
        do {
            b += a.offsetLeft;
            c += a.offsetTop
        } while (a = a.offsetParent);
        return {
            x: b,
            y: c
        }
    }
    return undefined
}
function rgbToHex(a, b, c) {
    if (a > 255 || b > 255 || c > 255) {
        throw "Invalid color component"
    }
    return (a << 16 | b << 8 | c).toString(16)
}
function pm(a) {
    var b = gcp(this);
    var c = a.pageX - b.x;
    var d = a.pageY - b.y;
    var e = "x=" + c + ", y=" + d;
    var f = this.getContext("2d");
    var g = f.getImageData(c, d, 1, 1).data;
    hex = "0x" + ("000000" + rgbToHex(g[0], g[1], g[2])).slice(-6)
}
function bpd(a) {
    bc = hex
}
function rpd(a) {
    rc = hex
}

var vp, cam, s, rr, garage;
var ism = false,
    mdx = 0,
    mdy = 0,
    dp = 0,
    dy = 0,
    cam_p = 70,
    cam_y = 270,
    cmx = 0,
    cmy = 0,
    cam_d = 250;
var path = "";
var fullscreen = false;
var bm, rm;
var bc = 10027008,
    rc = 15658734;
var cam_t = "auto";
var c01, c02, c03, c04, c05, c06, c07, c08;
var cars = [];
var index = 0;
var dirY = "down";
var cl;
var picker = new Image;
picker.src = "gui/spectrumBitmap.jpg";
picker.onload = function () {
    var a = document.getElementById("body-picker-canvas");
    var b = document.getElementById("rims-picker-canvas");
    a.width = b.width = 264;
    a.height = b.height = 86;
    a.addEventListener("mousemove", pm, false);
    b.addEventListener("mousemove", pm, false);
    a.addEventListener("mouseup", bpd, false);
    b.addEventListener("mouseup", rpd, false);
    var c = a.getContext("2d");
    c.drawImage(picker, 0, 0);
    var d = b.getContext("2d");
    d.drawImage(picker, 0, 0)
};
var hex;
